{
  "author": {
    "name": "Adam Rudd",
    "email": "adam.rudd@uqconnect.edu.au"
  },
  "name": "mqtt",
  "description": "A library for the MQTT protocol",
  "version": "0.2.9",
  "contributors": [
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    }
  ],
  "keywords": [
    "mqtt",
    "publish/subscribe",
    "publish",
    "subscribe"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/adamvr/MQTT.js.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "bin": {
    "mqtt_pub": "./bin/mqtt_pub",
    "mqtt_sub": "./bin/mqtt_sub"
  },
  "engines": {
    "node": ">=0.8.6"
  },
  "dependencies": {
    "readable-stream": "~1.0.2"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "readme": "# mqtt.js [![Build Status](https://travis-ci.org/adamvr/MQTT.js.png)](https://travis-ci.org/adamvr/MQTT.js)\n\n## Important note for existing users\n\nv0.2.0 has brough some API breaking changes to mqtt.js. Please\nconsult the [migration guide](http://github.com/adamvr/MQTT.js/wiki/migration) for information\nor open an issue if you need any help.\n\n## Introduction\n\nmqtt.js is a library for the MQTT protocol, written in javascript.\n\n\n## Installation\n\n    npm install mqtt\n\n## Documentation\n\nDetailed documentation can be found in [the wiki](http://github.com/adamvr/MQTT.js/wiki)\n\n## Client API usage\n\nSee: `examples/client`\n\nSimple publish client:\n\n    var mqtt = require('mqtt')\n      , client = mqtt.createClient();\n\n    client.publish('messages', 'mqtt');\n    client.publish('messages', 'is pretty cool');\n    client.publish('messages', 'remember that!', {retain: true});\n    client.end();\n\nSimple subscribe client:\n\n    var mqtt = require('mqtt')\n      , client = mqtt.createClient();\n\n    client.subscribe('messages');\n    client.publish('messages', 'hello me!');\n    client.on('message', function(topic, message) {\n      console.log(message);\n    });\n\nChainable API!:\n\n    var mqtt = require('mqtt')\n      , client = mqtt.createClient();\n\n    client\n      .subscribe('messages')\n      .publish('presence', 'bin hier')\n      .on('message', function(topic, message) {\n        console.log(topic);\n      });\n\n## Server API usage\n\nA broadcast server example, included in `examples/broadcast.js`:\n\n    var mqtt = require('mqtt');\n\n    mqtt.createServer(function(client) {\n      var self = this;\n\n      if (!self.clients) self.clients = {};\n\n      client.on('connect', function(packet) {\n        client.connack({returnCode: 0});\n        client.id = packet.clientId;\n        self.clients[client.id] = client;\n      });\n\n      client.on('publish', function(packet) {\n        for (var k in self.clients) {\n          self.clients[k].publish({topic: packet.topic, payload: packet.payload});\n        }\n      });\n\n      client.on('subscribe', function(packet) {\n        var granted = [];\n        for (var i = 0; i < packet.subscriptions.length; i++) {\n          granted.push(packet.subscriptions[i].qos);\n        }\n\n        client.suback({granted: granted});\n      });\n\n      client.on('pingreq', function(packet) {\n        client.pingresp();\n      });\n\n      client.on('disconnect', function(packet) {\n        client.stream.end();\n      });\n\n      client.on('close', function(err) {\n        delete self.clients[client.id];\n      });\n\n      client.on('error', function(err) {\n        client.stream.end();\n        console.log('error!');\n      });\n    }).listen(1883);\n\n\n",
  "readmeFilename": "README.md",
  "_id": "mqtt@0.2.9",
  "_from": "mqtt@*"
}
